<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0061)http://www.complang.tuwien.ac.at/schani/mathmap/language.html -->
<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
 <TITLE>The MathMap Language Tutorial</TITLE> 
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<META name="GENERATOR" content="MSHTML 11.00.9600.17690"></HEAD> 
<BODY>
<CENTER>
<H1>The MathMap Language Tutorial</H1></CENTER>
<P>MathMap is a language for transforming existing images and producing entirely 
new ones.  Think of it as the ultimate image and animation filter.  This 
flexibility, however, comes at a price: Using MathMap to create a new 
transformation isn't as simple as using some pre-built image manipulation 
filter.  Instead, you have to precisely describe what MathMap should do.  This 
usually requires a bit of math knowledge (for most tasks, high-school math is 
more than sufficient) and it is necessary to know the MathMap language. 
<P>This document is a gentle introduction to the MathMap language.  Very little 
mathematical knowledge is assumed, and almost no programming skills are 
needed--although they would certainly come in handy. 
<P>Please take the time to read through this introduction.  Try out the examples 
we give and play around with them.  Change them a little and see what happens.  
That way, you will quickly gain a feeling for what you can achieve with MathMap 
and in which ways.  If you do this, we are confident that you will soon create 
your own image filters and maybe even get hooked on MathMap. 
<P>This tutorial deals with the following topics: 
<DT>
<LI><A href="http://www.complang.tuwien.ac.at/schani/mathmap/language.html#basics">Basic 
Principles</A> 
<LI><A href="http://www.complang.tuwien.ac.at/schani/mathmap/language.html#cartesian">The 
Cartesian Coordinate System</A> 
<LI><A href="http://www.complang.tuwien.ac.at/schani/mathmap/language.html#inputImages">Input 
Images</A> 
<LI><A href="http://www.complang.tuwien.ac.at/schani/mathmap/language.html#polar">The 
Polar Coordinate System</A> 
<LI><A href="http://www.complang.tuwien.ac.at/schani/mathmap/language.html#conditionals">Conditionals</A> 
<LI><A href="http://www.complang.tuwien.ac.at/schani/mathmap/language.html#variables">Variables</A> 
<LI><A href="http://www.complang.tuwien.ac.at/schani/mathmap/language.html#userValues">User 
Values</A> 
<LI><A href="http://www.complang.tuwien.ac.at/schani/mathmap/language.html#animations">Animations</A> 
</LI></DT>
<H2><A name="basics"></A>Basic Principles</H2>
<BLOCKQUOTE>
  <P>The basic operating principle of MathMap is very simple.  To create an 
  image of a given size, MathMap simply goes through all the elements (pixels) 
  of the image to be created and "asks" your filter how the pixel in question 
  should look like, i.e. what color it should have. 
  <P>Let's make a filter that produces a white image: 
  <BLOCKQUOTE>
<PRE>filter white ()
    grayColor(1)
end
</PRE></BLOCKQUOTE>
  <P>As you can see, MathMap filters always start with the word <TT>filter</TT> 
  and end with the word <TT>end</TT>.  The word <TT>white</TT> after 
  <TT>filter</TT> is simply the name of the filter and you are free to choose 
  your own names as you like.  The parentheses <TT>()</TT> serve a purpose which 
  we'll come to later. 
  <P><TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_grayColor">grayColor</A></TT> 
  is a function producing a gray level color. What it needs to know is the gray 
  level you want to produce.  In this case, the gray level we want is 
  <TT>1</TT>, which stands for white. <TT>0</TT> is black, and <TT>0.5</TT> is 
  halfway in between.  If you provide a value greater than <TT>1</TT>, MathMap 
  will use <TT>1</TT> instead (there is no color whiter than white!).  
  Similarly, <TT>0</TT> will be used if a value less than <TT>0</TT> is passed 
  to the function. 
  <P>Such values given to functions are called <EM>arguments</EM>.  As we have 
  just seen, <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_grayColor">grayColor</A></TT> 
  takes exactly one argument.  Arguments are always given to a function after 
  its name, enclosed in parentheses.  As we will shortly see, if a function 
  takes more than one argument, those arguments are separated by commas. 
  <P>Producing gray levels is fun, but we'd like to play around with "real" 
  colors, too.  So, let's produce a red image: 
  <BLOCKQUOTE>
<PRE>filter red ()
    rgbColor(1, 0, 0)
end
</PRE></BLOCKQUOTE>
  <P>As you can see, <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_rgbColor">rgbColor</A></TT> 
  takes three arguments and produces a color.  Its first argument is the amount 
  of red in the color.  The second argument is the color's green component, and 
  the third argument specifies the blue component.  Again, useful values range 
  from <TT>0</TT> to <TT>1</TT>.  Values too large or too small are clipped to 
  <TT>1</TT> or <TT>0</TT>, respectively. Try to change the values and see how 
  it affects the output color. </P></BLOCKQUOTE>
<H2><A name="cartesian"></A>The Cartesian Coordinate System</H2>
<BLOCKQUOTE>
  <P>So far, the pixels in our images have always had the same color.  When we 
  produce images with multiple colors, we usually want to determine the color 
  based on the position of the pixel in question. 
  <P>MathMap allows access to the coordinates of the pixel being calculated.  It 
  supports two coordinate systems.  The first one, which you are certainly 
  familiar with, is the cartesian coordinate system. Each pixel has two 
  coordinates, called <TT>x</TT> and <TT>y</TT>.  The following figure 
  illustrates the cartesian coordinate system: 
  <P><IMG src=""> 
  <P>The point labeled "O" is the <EM>origin</EM> of the coordinate system.  
  Both its coordinates (<TT>x</TT> and <TT>y</TT>) are zero. The origin is 
  always in the center of the image.  The point "p" in the illustration has a 
  value of <TT>0.5</TT> for the coordinate <TT>x</TT> and <TT>0.2</TT> for 
  <TT>y</TT>.  That's because it's halfway from the origin to the right edge of 
  the image and one fifth to the top edge. As you can see, the <TT>x</TT> 
  coordinate is <TT>1</TT> at the right edge of the image and <TT>-1</TT> at the 
  left edge.  The same holds for the <TT>y</TT> coordinate and the top and 
  bottom edges, respectively. 
  <P>Let's use this knowledge to produce an image which is black on the left, 
  white on the right and has gray levels in between.  We want to produce this 
  image: 
  <P><IMG src="The%20MathMap%20Language%20Tutorial_files/gray_gradient.jpg"> 
  <P>We know that we can use <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_grayColor">grayColor</A></TT> 
  to produce a gray level. However, we need a number between <TT>0</TT> and 
  <TT>1</TT> to get colors between black and white.  Let's look at what we have. 
   At the right edge of the image the value of <TT>x</TT> is <TT>1</TT> and at
   the left edge it's <TT>-1</TT>.  In order to get <TT>0</TT> at the left edge, 
  we can simply add <TT>1</TT> to <TT>x</TT>, i.e. use <TT>x+1</TT>.  At the 
  right edge, however, we now get <TT>2</TT> instead of <TT>1</TT>, which we can 
  rectify by dividing by <TT>2</TT>, which gives us <TT>(x+1)/2</TT>.  Now we 
  have what we want, and we can give this expression as an argument to <TT><A 
  href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_grayColor">grayColor</A></TT>: 
  <BLOCKQUOTE>
<PRE>filter gray_gradient ()
    grayColor((x + 1) / 2)
end
</PRE></BLOCKQUOTE>
  <P>Try to do the same for the <TT>y</TT> coordinate, i.e. make a gradient from 
  bottom to top instead of from left to right.  You could also try to combine 
  both coordinates to produce a gradient which goes from the bottom left corner 
  to the top right corner. </P></BLOCKQUOTE>
<H2><A name="inputImages"></A>Input Images</H2>
<BLOCKQUOTE>
  <P>While it's fun to produce completely new images, it is often nice or 
  necessary to modify existing ones.  We will use this as our input image: 
  <P><A href="http://www.flickr.com/photos/schani/30729426/in/set-487122/"><IMG 
  src="The%20MathMap%20Language%20Tutorial_files/finn.jpg"></A> 
  <P>What we have to do is tell MathMap that we want to give it an input image, 
  and we have to give it a name, because there might be more than one.  That's 
  where the parentheses after the name of the filter come in.  Between them, we 
  give all the inputs our filter gets: 
  <BLOCKQUOTE>
<PRE>filter ident (image in)
    in(xy)
end
</PRE></BLOCKQUOTE>
  <P>A few things are new here.  Notice the declaration of the input image, 
  which we call <TT>in</TT>.  The reason why we have to specify with the word 
  <TT>image</TT> that it's an image is that there are input types other than 
  images, which we'll come to later. 
  <P>What's new as well is the way we use the input image.  It looks exactly 
  like using a function with one argument, in this case <TT>xy</TT>, which we 
  haven't explained yet, either.  <TT>xy</TT> is a variable that combines 
  <TT>x</TT> and <TT>y</TT> in one value, with the additional information that 
  it's cartesian coordinates.  That information is necessary because, as we'll 
  see later, MathMap supports another coordinate system, as well. 
  <P>So, you can use an input image just like you use a function.  It takes one 
  argument, namely the coordinates of the pixel that you request.  In the script 
  above, we are simply passing along the coordinates that our filter is given, 
  so we just copy the input image, which is not very exciting. 
  <P>A very simple effect is to flip the image horizontally.  This can be 
  achieved by changing the sign of the <TT>x</TT> coordinate, i.e. making 
  negative coordinates positive and vice versa: 
  <BLOCKQUOTE>
<PRE>filter flip (image in)
    in(xy:[-x, y])
end
</PRE></BLOCKQUOTE>
  <P>There's two other new pieces of syntax here.  First of all we're using 
  square brackets to combine the x and y coordinates into one value, called a 
  "tuple".  You can build tuples with as many numbers as you like.  Tuples can 
  only contain numbers, though, and not other tuples.  The variable <TT>xy</TT> 
  that we've seen in the filter <TT>ident</TT> above is a tuple, as well. 
  <P>In addition, we're using the colon to give the tuple a so-called "tag", 
  namely <TT>xy</TT>, which actually has no direct relation to the variable 
  <TT>xy</TT> seen above.  This specific tag says that the tuple is a pair of 
  cartesian coordinates.  Without that tag, MathMap wouldn't know which 
  coordinate system you're using to request a pixel from the input image. 
  <P>Try out the script for yourself.  Also, try to predict what would happen if 
  you changed the sign of the <TT>y</TT> coordinate instead, then try it out and 
  see if you were right. 
  <P>Now, let's shake the waves with our image.  The function <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_sin">sin</A></TT> 
  will come in handy for our purposes.  This is what its graph looks like (by 
  the way, this graph was produced by MathMap, using an expression by Hans 
  Lundmark): 
  <P><IMG src=""> 
  <P>As you can see, the value of <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_sin">sin</A></TT> 
  oscillates between <TT>-1</TT> and <TT>1</TT>.  The length of its oscillation
   period (the distance it needs to make a whole "cycle") is <TT>2*pi</TT>.  The 
  value of <TT>pi</TT>, as is well known, is about <TT>3.14159</TT>. 
  <P>We will now try to shift whole pixel columns up and down, depending on 
  their <TT>x</TT> coordinates.  The shift pattern will resemble the graph of 
  the <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_sin">sin</A></TT> 
  function, only that we will use a period length of half the width of the 
  image, i.e. <TT>1</TT>, and we will shift them up or down by at most 
  <TT>0.1</TT>: 
  <BLOCKQUOTE>
<PRE>filter sine_finn (image in)
    in(xy:[x, y + 0.1 * sin(x * (2*pi))])
end
</PRE></BLOCKQUOTE>
  <P>The resulting image looks like this: 
  <P><IMG 
src="The%20MathMap%20Language%20Tutorial_files/sine_finn.jpg"></P></BLOCKQUOTE>
<H2><A name="polar"></A>The Polar Coordinate System</H2>
<BLOCKQUOTE>
  <P>In addition to the familiar cartesian coordinate system, MathMap also 
  supports the polar coordinate system.  Each pixel has two polar coordinates, 
  namely <TT>r</TT> and <TT>a</TT>.  The following illustration helps in 
  understanding the polar coordinate system: 
  <P><IMG src=""> 
  <P>The value of <TT>r</TT> is simply the distance from the origin (i.e. the 
  center of the image) to that pixel. 
  <P>The value of <TT>a</TT> is the angle between the positive x-axis and the 
  line from the origin to the pixel in question. 
  <P>However, the angle is not measured in degrees (<TT>0</TT>-<TT>360</TT>), 
  but in radians, which range from <TT>0</TT> to <TT>2*pi</TT>.  This may seem a 
  bit awkward, but it is more convenient mathematically.  MathMap provides two 
  functions to convert between radians and degrees, namely <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_rad2deg">rad2deg</A></TT> 
  and <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_deg2rad">deg2rad</A></TT>. 
  <P>Polar coordinates make it very easy to generate pond-like effects. When we 
  try the wavy script from above and use polar instead of cartesian coordinates, 
  leaving the <TT>a</TT> coordinate unchanged and shifting the <TT>r</TT> 
  coordinate, we get the following expression: 
  <BLOCKQUOTE>
<PRE>filter finn_pond (image in)
    in(ra:[r + 0.1 * sin(r * (2*pi)), a])
end
</PRE></BLOCKQUOTE>
  <P>which generates this image: 
  <P><IMG src="The%20MathMap%20Language%20Tutorial_files/finn_pond.jpg"> 
  <P>Notice how this script uses the tag <TT>ra</TT>, instead of <TT>xy</TT>, to 
  let MathMap know that the coordinates given to the input image are polar and 
  not cartesian. </P></BLOCKQUOTE>
<H2><A name="conditionals"></A>Conditionals</H2>
<BLOCKQUOTE>
  <P>Let's create an image which looks like a shooting target: 
  <P><IMG src="The%20MathMap%20Language%20Tutorial_files/target.jpg"> 
  <P>Obviously, whether a pixel is red or white depends solely on its distance 
  from the center, which we know is available as <TT>r</TT>.  I have chosen the 
  width of each ring as <TT>0.2</TT>, i.e. the distance between the radii of the 
  inner circles of two neighboring red (or white) rings is <TT>0.4</TT>.  Hence, 
  the expression we are looking for is periodic with a period of <TT>0.4</TT>. 
  <P>To solve this problem, we will use the modulo operator, which is available 
  as <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func___mod">%</A></TT>. 
   Its value is the remainder of the division of its left operand by its right 
  operand.  As an example, <TT>7%3</TT> is <TT>1</TT> because the remainder of 
  the division of <TT>7</TT> by <TT>3</TT> is <TT>1</TT>. This operation is 
  periodic.  Its period is the value of its right operand (the divisor).  
  Furthermore, the result of the operation is never greater than the right 
  operand.  So, for example, <TT>r%0.4</TT> is periodic with a period of 
  <TT>0.4</TT> and is always between <TT>0</TT> (inclusive) and <TT>0.4</TT> 
  (exclusive).  Let's see what this looks like: 
  <BLOCKQUOTE>
<PRE>filter rmod ()
    grayColor((r%0.4)/0.4)
end
</PRE></BLOCKQUOTE>
  <P>In order to be nice to <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_grayColor">grayColor</A></TT>, 
  the value is scaled to be in the range from <TT>0</TT> to <TT>1</TT> (instead 
  of <TT>0.4</TT>).  The resulting image looks like this: 
  <P><IMG src="The%20MathMap%20Language%20Tutorial_files/rmod.jpg"> 
  <P>You can see that the value starts out as <TT>0</TT> at the center of the 
  image, climbs to <TT>1</TT> at a distance of <TT>0.4</TT> from the center and 
  then immediately drops to <TT>0</TT> again, repeating this cycle forever 
  (well, in our case, to the boundaries of the image). 
  <P>You may want to try to leave out the rescaling "<TT>/0.4</TT>" to see the 
  difference. 
  <P>All we have to do now is to check whether we are in the first half of a 
  period (in which case <TT>r%0.4</TT> is less than <TT>0.2</TT>), or in the 
  second.  If we are in the first, the color for the pixel is red, otherwise it 
  is white.  MathMap provides a construct for such decisions: 
  <BLOCKQUOTE>
<PRE>filter target ()
    if r%0.4 &lt; 0.2 then
        rgbColor(1,0,0)
    else
        rgbColor(1,1,1)
    end
end
</PRE></BLOCKQUOTE>
  <P>The indentation is used merely to make the expression easier to read. You 
  can indent your code any way you like (or not at all). 
  <P>The expression should be easy enough to understand.  If the condition is 
  fulfilled, the result is the color red, otherwise it is the color white. 
</P></BLOCKQUOTE>
<H2><A name="variables"></A>Variables</H2>
<BLOCKQUOTE>
  <P>Sometimes you want to use one value in multiple places in your expression.  
  It's not necessary to write that value twice.  Instead you give it a name by 
  which you can refer to it later.  Let's say we want to produce an image like 
  this: 
  <P><IMG src="The%20MathMap%20Language%20Tutorial_files/finn_vignette.jpg"> 
  <P>As you can see, the pixels from the original image fade to black with the 
  distance from the center.  They reach the black color at the corners of the 
  image. 
  <P>The variable <TT>r</TT>, which holds the distance from the center of the 
  image, is measured in the same distance units as the cartesian coordinates, 
  and its maximum value, which it reaches in the four corners of the image, is 
  provided by the constant <TT>R</TT> (which is the square root of <TT>2</TT> in 
  square images, in case you must know).  If we scale this down to <TT>1</TT>, 
  it's much easier to work with, so we'll use <TT>r/R</TT>.  This expression's 
  value is <TT>0</TT> at the center of the image and increases with the distance 
  from the center.  It reaches <TT>1</TT> in the corners, exactly where we want 
  the color to be solid black. 
  <P>Given the color of a pixel in the original image and its transformed (as 
  above) distance from the center, we can now figure out what to do.  If the 
  transformed distance is <TT>0</TT> (in the center) we want the original color 
  unchanged.  If it's <TT>1</TT>, we want the color black.  We can reach that 
  effect by multiplying the three color components of the pixel by <TT>1</TT>
   minus the transformed distance, i.e. by <TT>1-r/R</TT>. 
  <P>We can use the functions <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_red">red</A></TT>, 
  <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_green">green</A></TT>, 
  and <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_blue">blue</A></TT>
   to access the components of a color.  Now we could write the red component of 
  our output image as <TT>red(in(xy))*(1-r/R)</TT>.  We'd have to use equivalent 
  expressions for the green and blue components and then use them as arguments 
  to <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_rgbColor">rgbColor</A></TT>. 
   By assigning the values <TT>in(xy)</TT> and <TT>1-r/R</TT> to variables, 
  which we'll call <TT>p</TT> and <TT>d</TT> (you can choose any name you like, 
  as long as it's not the name of a built-in constant or variable or a keyword; 
  consult the <A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html">MathMap 
  reference</A> for the names of all of those), we can write the resulting 
  expression much shorter as <TT>rgbColor(red(p)*d, green(p)*d, blue(p)*d)</TT>.
   The complete filter is: 
  <BLOCKQUOTE>
<PRE>filter finn_vignette (image in)
    p=in(xy);
    d=1-r/R;
    rgbColor(red(p)*d, green(p)*d, blue(p)*d)
end
</PRE></BLOCKQUOTE>
  <P>As you can see, assigning values to variables is very straightforward.  You 
  must separate variable assignments and other expressions with semicolons. 
  <P>By the way: Using more advanced features of MathMap you can write an 
  expression equivalent to the above as 
  <BLOCKQUOTE>
<PRE>filter finn_vignette (image in)
    lerp(r/R, in(xy), grayColor(0))
end
</PRE></BLOCKQUOTE>
  <P>So, please go on reading, there's more to come. </P></BLOCKQUOTE>
<H2><A name="userValues"></A>User Values</H2>
<BLOCKQUOTE>
  <P>Sometimes you need to put some values into your script which are more or 
  less arbitrary.  Often you want to try out several different values, and it's 
  tedious to change the script every time by hand.  That's where user values 
  come in.  Let's reiterate our wave example: 
  <BLOCKQUOTE>
<PRE>filter sine_finn (image in)
    in(xy:[x, y + 0.1 * sin(x * (2*pi))])
end
</PRE></BLOCKQUOTE>
  <P>There are two parameters here which we have chosen more or less
   arbitrarily, namely the amplitude of the wave (in this case <TT>0.1</TT>) and 
  the wave length (in this case implicitly given as <TT>1</TT>).  Wouldn't it be 
  nice if we could change these values with sliders instead of having to edit 
  the expression? 
  <P>That's where inputs come in again.  We've seen above that we can give 
  images as inputs to filters.  Now we'll learn how to supply numbers as well: 
  <BLOCKQUOTE>
<PRE>filter sine_finn (image in, float amplitude: 0-2, float wavelength: 0-10)
    in(xy:[x, y + amplitude * sin(x * (2*pi) / wavelength)])
end
</PRE></BLOCKQUOTE>
  <P>The type <TT>float</TT> denotes a so-called <A href="http://en.wikipedia.org/wiki/Floating_point">floating 
  point</A> number, which represents a real number and can have a fractional
   component, in contrast to integers, which you can specify with the word 
  <TT>int</TT>.  After the name of the argument you can also give a range of 
  allowed values, in the case of the argument <TT>amplitude</TT> above from 
  <TT>0</TT> to <TT>2</TT>. 
  <P>There are not only argument types for images and numbers, but also for 
  colors, color gradients and curves.  Check out the <A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html">Reference 
  Manual</A> for details. </P></BLOCKQUOTE>
<H2><A name="tuples"></A>Tuples and Tags</H2>
<BLOCKQUOTE>
  <P>Now it's time to look at a more technical subject, namely MathMap's type 
  system.  We've already talked about it a little when we examined coordinates, 
  and now we'll go into a bit more detail. 
  <P>The type system of MathMap is designed to be as invisible as possible, but 
  in order to unleash MathMap's full potential, you will need to know one or two 
  things about it.  Don't worry, it's not very complicated. 
  <P>Sometimes it's convenient to treat two or more numbers as a single value.  
  One such example is colors.  A single color is actually four distinct numbers. 
   We have already come across three of them, namely the red, green, and blue 
  components.  The fourth is the color's transparency value, called 
  <EM>alpha</EM>.  A color with an alpha of <TT>1</TT> is completely opaque, 
  like all the colors we have seen so far.  An alpha component of <TT>0</TT> 
  means full transparency, <TT>0.5</TT> means half transparent, and so on. 
  <P>So far, we have always treated colors as single values.  We have
   constructed colors using functions such as <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_rgbColor">rgbColor</A></TT> 
  and retrieved their components with functions like <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_red">red</A></TT>. 
   We can, however, do these things without using those functions.  This, for
   example, is the half-transparent color green: 
  <BLOCKQUOTE>
<PRE>rgba:[0, 1, 0, 0.5]
</PRE></BLOCKQUOTE>
  <P>One or more numbers within square brackets, separated by commas, constitute 
  a <EM>tuple</EM>.  So, tuples are just ordered collections of numbers.  They 
  are ordered because MathMap remembers in which order you have written their 
  components.  For example, the tuple <TT>[1,2,3]</TT> is not the same as 
  <TT>[3,2,1]</TT>. 
  <P>The name <TT>rgba</TT> is a <EM>tag</EM>.  The tag <TT>rgba</TT> tells 
  MathMap that that tuple is not just four numbers, but a color with red, green, 
  blue and alpha components.  This begs the question whether there are other 
  kinds of colors.  Actually, there are. MathMap also supports colors in the 
  so-called <A href="http://en.wikipedia.org/wiki/HSV_color_space">HSV color
   space</A>.  Those colors are given the tag <EM>hsva</EM>.  MathMap uses the 
  tags to determine how to interpret the numbers in the tuples. 
  <P>Many operators and functions work on tuples as well as on single numbers.  
  The functions <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_min">min</A></TT> 
  and <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_max">max</A></TT> 
  for example, calculate the minimum and maximum values for each pair of tuple
   elements.  To set the red component of an image to <TT>0</TT>, for example, 
  you can use the following script: 
  <BLOCKQUOTE>
<PRE>filter remove_red (image in)
    min(in(xy), rgba:[0, 1, 1, 1])
end
</PRE></BLOCKQUOTE></BLOCKQUOTE>
<H2><A name="animations"></A>Animations</H2>
<BLOCKQUOTE>
  <P>MathMap provides the functionality to create animations.  To that end, the 
  language provides a variable called <TT>t</TT>.  For each single picture in 
  the animation (such pictures are called <EM>frames</EM>) <TT>t</TT> has a 
  different value, depending on the position of the frame within the whole 
  animation.  The first picture in the image always has <TT>t</TT> set to 
  <TT>0</TT>, while for the last picture it is set to <TT>1</TT>.  Actually, the
   latter statement isn't always true, as we will discover shortly, but for the 
  time being, simply assume that it is. 
  <P>The following script produces an animation which fades from black to white: 
  <BLOCKQUOTE>
<PRE>filter black_to_white ()
    grayColor(t)
end
</PRE></BLOCKQUOTE>
  <P>You will often want to produce animations which loop seemlessly, i.e. which 
  look like one endless animation when looped.  For such animations, make sure 
  that the image with a <TT>t</TT> value of <TT>1</TT> looks exactly like the 
  one with a value of <TT>0</TT>, like in the following script: 
  <BLOCKQUOTE>
<PRE>filter black_white_loop ()
    grayColor((sin(t * 2*pi) + 1) / 2)
end
</PRE></BLOCKQUOTE>
  <P>The problem here is that if MathMap would render the first image in the 
  animation with <TT>t</TT> as <TT>0</TT> and the last image with <TT>t</TT> as 
  <TT>1</TT>, you would have the same frame twice when looping.  Therefore, 
  MathMap lets you choose (in the user interface) whether you would like to 
  create a periodic (looping) animation or not.  If you do, <TT>t</TT> never
   reaches <TT>1</TT> at the end of the animation but stops shortly before, 
  depending on how many frames you want your animation to have. For example, for 
  a periodic animation with 10 frames, <TT>t</TT> takes on the values 
  <TT>0</TT>, <TT>0.1</TT>, <TT>0.2</TT>, ... <TT>0.9</TT>. 
  <P>Hint: One way to make periodic animations is to use periodic functions like 
  <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_sin">sin</A></TT>, 
  <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_cos">cos</A></TT> 
  or the modulo operator <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func___mod">%</A></TT>. 
  </P></BLOCKQUOTE>
<H2><A name="functions"></A>Some Useful Functions</H2>
<BLOCKQUOTE>
  <P>Here is an overview of some MathMap functions which are very useful in many 
  situations.  This is not a complete function reference.  If you are looking 
  for one, you'll find it in the <A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html">Reference 
  Manual</A>. 
  <H3><TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_scale">scale</A></TT></H3>
  <BLOCKQUOTE>
    <P>Quite often you find that you have a value which varies within a given 
    range, but you want the range to be different.  Take, for example the gray 
    gradient: 
    <P><IMG src="The%20MathMap%20Language%20Tutorial_files/gray_gradient.jpg"> 
    <P>The variable <TT>x</TT> varies from <TT>-1</TT> to <TT>1</TT> but you 
    want it to be between <TT>0</TT> and <TT>1</TT>.  In such cases you can use 
    the <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_scale">scale</A></TT> 
    function.  The expression <TT>scale(x, -1, 1, 0, 1)</TT> is <TT>0</TT> when 
    <TT>x</TT> is <TT>-1</TT> and <TT>1</TT> when <TT>x</TT> is <TT>1</TT>.  
    Hence, you can create the above image with the script 
    <BLOCKQUOTE>
<PRE>filter gray_gradient ()
    grayColor(scale(x, -1, 1, 0, 1))
end
</PRE></BLOCKQUOTE></BLOCKQUOTE>
  <H3><TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_lerp">lerp</A></TT></H3>
  <BLOCKQUOTE>
    <P>Suppose we want to produce a gradient from red to green: 
    <P><IMG 
    src="The%20MathMap%20Language%20Tutorial_files/redgreengradient.jpg"> 
    <P>We know from above that we can use <TT>scale(x, -1, 1, 0, 1)</TT> for a 
    value which is <TT>0</TT> at the left image edge and <TT>1</TT> at the right 
    edge.  <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_lerp">lerp</A></TT> 
    does the rest: it takes two tuples and produces a value which is "in
     between" these two values by the same amount as its first argument is in 
    between <TT>0</TT> and <TT>1</TT>.  Hence, the gradient above can be 
    produced by this expression: 
    <BLOCKQUOTE>
<PRE>filter redgreengradient ()
    lerp(scale(x, -1, 1, 0, 1), rgbColor(1,0,0), rgbColor(0,1,0))
end
</PRE></BLOCKQUOTE></BLOCKQUOTE>
  <H3><TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_inintv">inintv</A></TT></H3>
  <BLOCKQUOTE>
    <P>The function <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_inintv">inintv</A></TT> 
    makes it easy to check whether a value lies within a given range.  <TT><A 
    href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_inintv">inintv</A></TT> 
    has a value of <TT>1</TT> if the condition is fulfilled, and of <TT>0</TT>
     otherwise.  You can use this as a condition in an <TT>if</TT> expression, 
    or as a value in its own right.  For example, this script draws a white ring 
    with an inner radius of <TT>0.4</TT> and an outer radius of <TT>0.6</TT>: 
    <BLOCKQUOTE>
<PRE>filter ring ()
    grayColor(inintv(r, 0.4, 0.6))
end
</PRE></BLOCKQUOTE></BLOCKQUOTE>
  <H3><TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_clamp">clamp</A></TT></H3>
  <BLOCKQUOTE>
    <P>Sometimes you have values which you want to lie within a given range.  In 
    case they don't, you simply want them to take on the largest value within 
    the range, if they are too large, or the smallest if they are too small. 
    <P>MathMap often does such operations automatically, for example if you 
    produce colors with components larger than <TT>1</TT> or smaller than 
    <TT>0</TT>. 
    <P>If you have to do it yourself, <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_clamp">clamp</A></TT> 
    can help you.  For example, <TT>clamp(v, [0,0,0], [1,1,1])</TT> restricts 
    every element of <TT>v</TT> to be in the range from <TT>0</TT> to 
    <TT>1</TT>. </P></BLOCKQUOTE>
  <H3><TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_rand">rand</A></TT></H3>
  <BLOCKQUOTE>
    <P>The function <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_rand">rand</A></TT> 
    generates a random number.  It takes two arguments: The minimum and the 
    maximum value of the number to be generated.  This filter, for examples, 
    randomly scatters the pixels of the input image (but not more than a 
    distance of 0.05 away from their original location in both directions): 
    <BLOCKQUOTE>
<PRE>filter scatter (image in)
    in(xy:[x + rand(-0.05,0.05), y + rand(-0.05,0.05)])
end
</PRE></BLOCKQUOTE></BLOCKQUOTE>
  <H3><TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_noise">noise</A></TT></H3>
  <BLOCKQUOTE>
    <P>In image manipulation, one often needs a function which is random but 
    doesn't change as abruptly as <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_rand">rand</A></TT> 
    does.  <TT><A href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html#func_noise">noise</A></TT>
     is a so-called <EM>solid noise</EM> function.  It takes a tuple of three 
    numbers and returns a value between <TT>-1</TT> and <TT>1</TT>. If the input 
    arguments change only by a little, so does the resulting value.  The overall 
    "look" of the function is random, though.  It's hard to describe, so it's 
    best you see for yourself: 
    <BLOCKQUOTE>
<PRE>filter noise_demo ()
    grayColor(scale(noise([x*5, y*5, t*2]), -1, 1, 0, 1))
end
</PRE></BLOCKQUOTE>
    <P>As you can see, the third input value depends on <TT>t</TT>, so try out 
    changing <TT>t</TT>.  For <TT>t</TT> being <TT>0</TT>, the resulting image 
    looks like this: 
    <P><IMG src="The%20MathMap%20Language%20Tutorial_files/noise_demo.jpg"> 
  </P></BLOCKQUOTE></BLOCKQUOTE>
<H2><A name="furtherInformation"></A>Further Information</H2>
<BLOCKQUOTE>
  <P>This tutorial has, despite its length, not covered all features and details 
  of MathMap.  For example, we didn't even mention loops (a programming language 
  feature having nothing to do with animations). 
  <P>To get more detailed information about the MathMap language, see the <A 
  href="http://www.complang.tuwien.ac.at/schani/mathmap/reference.html">MathMap 
  Reference Manual</A>. 
  <P>A very good way to learn how to do things with MathMap is to look at the 
  examples supplied with it.  Pick the examples you find interesting, look at 
  the filter sources, and try to figure out how they work. 
  <P>You might also want to look at the <A href="http://www.complang.tuwien.ac.at/schani/mathmap/">MathMap
   Homepage</A> for announcements, new documentation or interesting links.  The 
  best way to get involved in the MathMap community is by joining the <A href="http://groups.google.com/group/mathmap">MathMap 
  Google Group</A>. 
  <P>If you like MathMap, or if you have suggestions or questions regarding the 
  MathMap language or user interface, feel free to <A href="mailto:mark.probst@gmail.com">contact 
  the author</A>.  I am looking forward to your feedback. 
</P></BLOCKQUOTE></BODY></HTML>
